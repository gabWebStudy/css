/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    /* colocamos posicionamento relativo no header para poder ser referencia do logo-box */
    position: relative;
    height: 95vh;
    background-image:
        linear-gradient(
            to right bottom,
            rgba(126, 213, 111, 0.8),
            rgba(40, 180, 133, 0.8)), 
         url(
             ../img/hero.jpg);
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
}

/* vamos estilizar a logo e o container que a abriga */
.logo-box {
    /* com posicionamento absoluto podemos usar as propriedades top, left, bottom e right para posicionar o elemento */
    /* a referencia do posicionamento sera o elemento pai mais proximo com posicionamento setado para relative */
    position: absolute;
    top: 40px;
    left: 40px; 
}

/* aqui vai o css do container que abriga o texto (aquele que usamos para nao confundir com o botao) */
.text-box {
    /* vamos primeiro centralizar o texto do cabecalho */
    /* vamos definir um posicionamento em porcentagem, para que ele seja responsivo */
    position: absolute;
    top: 45%;
    left: 50%;
    /* somente com isso, o cabecalho nao estara totalmente centralizado */
    /* precisamos fazer ele retornar um pouco (metade do seu conteudo) nos eixos x e y para centralizar perfeitamente */
    transform: translate(-50%, -50%);
    /* os 50% do transform nao sao em referencia ao pai, mas sim ao elemento em si */
}

.logo {
    height: 35px;
    /* nao precisamos definir a largura. especificando a altura, a largura sera definida automaticamente */
}

/* vamos estilizar os cabecalhos */
.heading-primary {
    color: #fff;
    text-transform: uppercase;
}

.heading-primary-main {
    /* vamos setar o display pra block, pra quebrar linha. por natureza, o span eh um elemento inline */
    /* um elemento em bloco ocupa 100% da linha, o que forca o conteudo seguinte a ir para a proxima */
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
}